import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Player, PlayerStats } from '../interfaces/player.interface';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private backendApiPrefix = 'http://localhost:8080/api';

   // Use BehaviorSubject to make current player observable
  private _currentPlayer = new BehaviorSubject<Player | null>(null);
  readonly currentPlayer$ = this._currentPlayer.asObservable();

  constructor(private http: HttpClient) { }

   setCurrentPlayer(player: Player | null): void {
    this._currentPlayer.next(player);
  }

  getCurrentPlayer(): Player | null {
    return this._currentPlayer.getValue();
  }

  getAllPlayers(): Observable<Player[]> {
    return this.http.get<Player[]>(`${this.backendApiPrefix}/players`);
  }

  getPlayerById(id: number): Observable<Player> {
    return this.http.get<Player>(`${this.backendApiPrefix}/players/${id}`);
  }

  createPlayer(player: Player): Observable<Player> {
    const playerToCreate = {
        // id will be generated by the backend
        name: player.name,
        icon: player.icon,
        stats: {
          playerScore: 0,
          computerScore: 0,
          playerWins: 0,
          computerWins: 0,
          playerHistory: [],
          computerHistory: [],
          totalRounds: 0
        }
    };
    return this.http.post<Player>(`${this.backendApiPrefix}/players`, playerToCreate);
  }

  updatePlayerStats(id: number, stats: PlayerStats): Observable<Player> {
    return this.http.put<Player>(`${this.backendApiPrefix}/players/${id}/stats`, stats);
  }

  resetPlayerScore(id: number): Observable<any> {
    return this.http.put(`${this.backendApiPrefix}/players/${id}/reset-stats`, {});
  }

  getLeaderboardPlayerStats(): Observable<any> {
    return this.http.get(`${this.backendApiPrefix}/players/leaderboard-stats`);
  }
}
